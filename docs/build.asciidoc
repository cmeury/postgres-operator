= PostgreSQL Operator Build and Setup
v1.5, {docdate}

== Table of Contents

* <<Overview>>
* <<Requirements>>
* <<Kubernetes Environment>>
* <<Openshift Origin Environment>>
* <<Create Project and Clone>>
* <<Get Packaged Dependencies>>
* <<Build from Source>>
** <<Compiling the PostgreSQL Operator>>
** <<Build the Docker Images>>
** <<Deploy the PostgreSQL Operator>>
** <<Configuration>>
** <<Viewing Operator Resources>>
* <<Performing a Smoke Test>>

[#Overview]
== Overview

This document describes how to build from source code the
Postgres Operator.  If you don't want to build the images
from source, you can download them from the following:

 * Dockerhub (crunchydata/lspvc and crunchydata/postgres-operator images)
 * link:https://github.com/CrunchyData/postgres-operator/releases[Github Releases]  (pgo client and client configuration files, extracted to your $HOME)

Further details can be found in the link:design.asciidoc[PostgreSQL Operator Design] document on
how the operator is built and how it operates.

[#Requirements]
== Requirements

* Kubernetes 1.5.3+
* Openshift Origin 1.5.1+ and Openshift Container Platform 3.5
* link:https://hub.docker.com/r/crunchydata/crunchy-postgres/[PostgreSQL 9.5+ Container]
* link:https://hub.docker.com/r/crunchydata/crunchy-backup/[PostgreSQL Backup Container]

[#Kubernetes Environment]
== Kubernetes Environment

To test the *postgres-operator* you will need a Kubernetes cluster
environment.  There are many ways to install a Kube cluster, but for the
purposes of this document, I have created a test VM on Centos 7 that
installs a Kube cluster using the kubeadm project as described here.  link: http://linoxide.com/containers/setup-kubernetes-kubeadm-centos/

The kubeadm installation will create */etc/kubernetes/admin.conf* for
the kubeconfig file you will use to execute the *postgres-operator*, it
needs to be readable from your user account, to enable this change
the permissions:
....
sudo chmod +r /etc/kubernetes/admin.conf
....

Once you have your Kube VM created, install some of the
required dependencies:
....
yum -y install git
....

*NOTE* - as of Kube 1.6, RBAC security is enabled on most Kube
installations.  With RBAC, the *postgres-operator* needs permissions
granted to it to enable ThirdPartyResources viewing.  You can grant the
*default* Service Account a cluster role as one way to enable
permissions for the operator.  This course level of granting permissions
is not recommended for production.  This command will enable
the *default* Service Account to have the *cluster-admin* role:
....
kubectl create clusterrolebinding permissive-binding \
	--clusterrole=cluster-admin \
	--user=admin \
	--user=kubelet \
       	--group=system:serviceaccounts:default
....

See https://kubernetes.io/docs/admin/authorization/rbac/ for more
details on how to enable RBAC roles.

To test the *postgres-operator* you will need a Kubernetes cluster.

In testing, I've found that specifying GOMAXPROCS to equal your number
of CPUs when executing Kubernetes is preferable, for example:

....
export GOMAXPROCS=4
....

[#Openshift Origin Environment]
== Openshift Origin Environment

The postgres operator has been tested using Openshift Origin 1.5.1.

The operator works the same as in a Kubernetes environment except
that you have to configure the Origin permissions to allow
the operator to function.

The HostPath volume is by default restricted in Origin, so you
will have to grant access to the HostPath volume plugin for the
operator to access the Docker socket as a HostPath volume.

There is more than one way to alter the HostPath access, see:

....
oc edit scc restricted set allowHostDirVolumePlugin: true to let
....

This command will allow *all* pods to access HostPath volumes which
may not be permissible in your environment.

Alternatively you can create a service account, have the operator
use that service account, and grant the service account access
to use a HostPath volume.

see the following links for examples:
https://gitlab.com/gitlab-org/gitlab-ce/issues/24557
https://docs.openshift.org/latest/admin_guide/manage_scc.html#use-the-hostpath-volume-plugin

You will need to allow your openshift user (e.g. jeff)  permissions to view
the ThirdPartyResources, this is done by the following command
as the openshift admin user:
....
oc adm policy add-cluster-role-to-user cluster-admin jeff
....

To test on an Origin system, you will need to specify
a CO_CMD environment variable with the value of *oc* as follows:
....
export CO_CMD=oc
....

Also, you can set the namespace to use for deploying the operator
as follows, if not set, the namespace is set to *default*:
....
export CO_NAMESPACE=myproject
....

This will cause the *oc* command to be used within the operator
startup script and deploy the operator to the *myproject* namespace or project.

[#Create Project and Clone]
== Create Project and Clone
In your .bashrc file, include the following:
....
export GOPATH=$HOME/odev
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN
export COROOT=$GOPATH/src/github.com/crunchydata/postgres-operator
export CO_BASEOS=centos7
export CO_VERSION=1.5
export CO_IMAGE_TAG=$CO_BASEOS-$CO_VERSION
....

Then execute these commands to build the project structure:
....
mkdir -p $HOME/odev/src $HOME/odev/bin $HOME/odev/pkg
mkdir -p $GOPATH/src/github.com/crunchydata/
cd $GOPATH/src/github.com/crunchydata
git clone https://github.com/CrunchyData/postgres-operator.git
cd postgres-operator
....

[#Get Packaged Dependencies]
== Get Packaged Dependencies

At this point if you want to avoid building the images and binary
from source, you can pull down the Docker images as follows:
....
docker pull crunchydata/lspvc:centos7-1.5
docker pull crunchydata/postgres-operator:centos7-1.5
....

Then to get the *pgo* client, go to the Releases page and download the tar ball, uncompress
it into your $HOME directory:
....
cd $HOME
wget https://github.com/CrunchyData/postgres-operator/releases/download/v1.5/postgres-operator.1.5.tar.gz
tar xvzf ./postgres-operator.1.5.tar.gz
....

Lastly, add the *pgo* client into your PATH.

[#Build from Source]
== Build from Source

Install a golang compiler, this can be done with either
your package manager or by following directions
from https://golang.org/dl/

Then install the project library dependencies, starting
with version 1.5 the godep dependency manager is used
as follows:
....
cd $COROOT
go get github.com/tools/godep
godep restore
go get github.com/spf13/cobra github.com/spf13/viper
go get github.com/docker/docker/api github.com/docker/docker/client
....

In a development environment you will likely want to create a
*docker* group and add your user ID to that group, this allows
you as your normal user ID to access the *docker* daemon and
issue commands to it:
....
sudo groupadd docker
sudo usermod -a -G docker youruserID
sudo systemctl restart docker
newgrp docker
....

[#Compiling the PostgreSQL Operator]
=== Compiling the PostgreSQL Operator
....
cd $COROOT
make pgo
which pgo
....

[#Build the Docker Images]
=== Build the Docker Images
....
cd $COROOT
make operatorimage
make lsimage
docker images | grep crunchydata
....

[#Deploy the PostgreSQL Operator]
=== Deploy the PostgreSQL Operator
NOTE: This will create and use */data* on your
local system as the persistent store for the operator to use
for its persistent volume:
....
cd $COROOT/examples/operator
./deploy.sh
kubectl get pod -l 'name=postgres-operator'
kubectl get thirdpartyresources
....

Note that this example will create a PVC called *crunchy-pvc* that is
referenced in the examples and *pgo* configuration file as the
desired PVC to use when databases and clusters are created.

When you first run the operator, it will create the required
ThirdPartyResources.

Strategies for deploying the operator can be found in the link:strategies.asciidoc[PostgreSQL Operator Deployment Strategies] document.

[#Configuration]
== Configuration

The *pgo* client requires two configuration files be copied
to your $HOME as follows:
....
cp $COROOT/examples/pgo.yaml.emptydir $HOME/.pgo.yaml
cp $COROOT/examples/pgo.lspvc-template.json $HOME/.pgo.lspvc-template.json
vi $HOME/.pgo.yaml
....

Edit the $HOME/.pgo.yaml file changing the following
settings:
....
KUBECONFIG:  /etc/kubernetes/admin.conf
LSPVC_TEMPLATE:  /home/yourid/.pgo.lspvc-template.json
....

Note that this config file assumes your Kubernetes config file is
located in */etc/kubernetes/admin.conf*.  Update this kubeconfig
path to match your local Kube config file location.  Also, update
the location of the LSPVC_TEMPLATE value to match your $HOME value.

More in-depth explanations of postgres operator configurations are available
in the link:config.asciidoc[Configuration] document.

[#Viewing Operator Resources]
=== Viewing Operator Resources

When you first run the operator, it will look for the presence
of its third party resources, and create them if not found.  You can view the various resources created and used by the
operator as follows:
....
kubectl get thirdpartyresources
kubectl get pgclusters
kubectl get pgbackups
kubectl get pgupgrades
kubectl get pgpolicies
kubectl get pgclones
....

At this point, you should be ready to start using the *pgo* client!

[#Performing a Smoke Test]
== Performing a Smoke Test

A simple *smoke test* of the postgres operator includes testing
the following:

 * create a cluster (*pgo create cluster testcluster*)
 * scale a cluster (*pgo scale testcluster --replica-count=1*)
 * show a cluster (*pgo show cluster testcluster*)
 * show all clusters (*pgo show cluster all*)
 * backup a cluster (*pgo backup testcluster*)
 * show backup of cluster (*pgo show backup testcluster*)
 * show backup pvc of cluster (*pgo show backup testcluster --show-pvc-true*)
 * restore a cluster (*pgo create cluster restoredcluster --backup-pvc=testcluster-backup-pvc --backup-path=testcluster-backups/2017-01-01-01-01-01 --secret-from=testcluster*)
 * test a cluster (*pgo test restoredcluster*)
 * minor upgrade a cluster (*pgo upgrade testcluster*)
 * major upgrade a cluster (*pgo upgrade testcluster --upgrade-type=major*)
 * clone a cluster (*pgo clone testcluster --name=cloneexample*)
 * delete a cluster (*pgo delete cluster testcluster*)
 * create a policy from local file (*pgo create policy policy1 --in-file=./examples/policy/policy1.sql*)
 * create a policy from git repo (*pgo create policy gitpolicy --url=https://github.com/CrunchyData/postgres-operator/blob/master/examples/policy/gitpolicy.sql*)
 * repeat testing using emptydir storage type
 * repeat testing using create storage type
 * repeat testing using existing storage type

More detailed explanations of the commands can be found in the link:user-guide.asciidoc[User Guide].
